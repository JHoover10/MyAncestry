@page "/person/{Id}"

@inject IDataRepository dataRepository

<h1>@person.FirstName @person.LastName</h1>

<h2>@(born ?? "Somehow not alive?")</h2>

@if (died != null)
{
    <h2>@(died)</h2>
}

<MudTimeline>
    @for (int i = 0; i < events.Count; i++)
    {
        var alignment = (i % 2 == 0) ? Align.Left : Align.Right;
        var currentEvent = events[i];

        <MudTimelineItem Color="Color.Info" Size="Size.Small">
            <ItemOpposite>
                <MudText Color="Color.Info" Typo="Typo.h5">@currentEvent.DateTime.ToString("MM/dd/yyyy")</MudText>

                @if (places.Any(place => place.Id == currentEvent.PlaceId))
                {
                    <MudText Color="Color.Info" Typo="Typo.h6">@places.Single(place => place.Id == currentEvent.PlaceId).Name</MudText>
                }
            </ItemOpposite>
            <ItemContent>
                <MudText Color="Color.Info" Align="alignment" Typo="Typo.h6" GutterBottom="true">@currentEvent.EventType</MudText>

                @if (!string.IsNullOrWhiteSpace(currentEvent.Description))
                {
                    <MudText Align="alignment">@currentEvent.Description</MudText>
                }
            </ItemContent>
        </MudTimelineItem>
    }
</MudTimeline>

@code {
    [Parameter]
    public string Id { get; set; }

    Person person;
    List<Event> events;
    List<Place> places;
    string born = null;
    string died = null;
    string children = null;

    protected override async Task OnInitializedAsync()
    {
        person = dataRepository.Query<Person, Person>(person => person.Id == Id).Single();
        events = dataRepository.Query<Event, Event>(x => person.EventLinks.Any(y => y.Id == x.Id)).OrderBy(x => x.DateTime).ToList();
        places = dataRepository.Query<Place, Place>(place => events.Any(x => x.PlaceId == place.Id)).ToList();

        SetBornText();
        SetDiedText();
        SetMarriageText();
        SetChildrenText();
        SetParentText();
    }

    private void SetBornText()
    {
        Event birthday = events.SingleOrDefault(x => x.EventType == EventType.Birth);
        bool isDead = events.SingleOrDefault(x => x.EventType == EventType.Death) != null;

        if (birthday == null)
        {
            born = "Born: Somehow not alive?";
            return;
        }

        StringBuilder bornTextBuilder = new StringBuilder();
        int age = DateTime.Now.Year - birthday.DateTime.Year;

        if (birthday.DateTime > DateTime.Now.AddYears(-age))
        {
            age--;
        }

        if (isDead)
        {
            bornTextBuilder.Append($"Born: {birthday.DateTime.ToString("MMMM dd, yyyy")}");
        }
        else
        {
            bornTextBuilder.Append($"Born: {birthday.DateTime.ToString("MMMM dd, yyyy")} (age {age})");
        }

        if (birthday.PlaceId != null)
        {
            Place birthPlace = places.Single(place => place.Id == birthday.PlaceId);
            bornTextBuilder.Append($" {birthPlace.Name}");
        }

        born = bornTextBuilder.ToString();
    }

    private void SetDiedText()
    {
        Event death = events.SingleOrDefault(x => x.EventType == EventType.Death);

        if (death == null)
        {
            return;
        }

        Event birthday = events.SingleOrDefault(x => x.EventType == EventType.Birth);
        StringBuilder diedTextBuilder = new StringBuilder();
        int age = death.DateTime.Year - birthday.DateTime.Year;

        if (birthday.DateTime > DateTime.Now.AddYears(-age))
        {
            age--;
        }

        diedTextBuilder.Append($"Died: {death.DateTime.ToString("MMMM dd, yyyy")} (aged {age})");

        if (death.PlaceId != null)
        {
            Place deathPlace = places.Single(place => place.Id == death.PlaceId);
            diedTextBuilder.Append($" {deathPlace.Name}");
        }

        died = diedTextBuilder.ToString();
    }

    private void SetMarriageText()
    { 
    }

    private void SetChildrenText()
    {
    }

    private void SetParentText()
    { 
    }
}
